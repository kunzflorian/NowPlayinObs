@page "/recommendations"
@using System.Timers
@using Microsoft.AspNetCore.SignalR.Client
@using NowPlayinObs.Domain
@using NowPlayinObs.Hubs
@using NowPlayinObs.Services
@rendermode InteractiveWebAssembly
@* @rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false)) *@
@inject IRecommendationService RecommendationService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-LN+7fdVzj6u52u30Kp6M/trliBMCMKTyK833zpbD+pXdCLuTusPj697FH4R/5mcr" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css">
<link href="_content/Blazor.Bootstrap/blazor.bootstrap.css" rel="stylesheet" />
<link href="/Recommendations/style.css" rel="stylesheet" />

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js" integrity="sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q" crossorigin="anonymous"></script>
<!-- Add chart.js reference if chart components are used in your application. -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.0.1/chart.umd.js" integrity="sha512-gQhCDsnnnUfaRzD8k1L5llCCV6O9HN09zClIzzeJ8OJ9MpGmIlCxm+pdCkqTwqJ4JcjbojFr79rl2F1mzcoLMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- Add chartjs-plugin-datalabels.min.js reference if chart components with data label feature is used in your application. -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.2.0/chartjs-plugin-datalabels.min.js" integrity="sha512-JPcRR8yFa8mmCsfrw4TNte1ZvF1e3+1SdGMslZvmrzDYxS69J7J49vkFL8u6u8PlPJK+H3voElBtUCzaXj+6ig==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- Add sortable.js reference if SortableList component is used in your application. -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
<script src="_content/Blazor.Bootstrap/blazor.bootstrap.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<script>
    var carousel = {
        "getSelectedIndex" : function(id){
            let index = $('#' + id + ' .carousel-inner .active').index();
            return index;
        }
    };
</script>


<div class="recommendation-headline" />
<Carousel @ref="_carousel" ShowPreviousNextControls="false" Interval="3000">
    @foreach (var recommendation in _recommendations)
    {
        <CarouselItem Class="recommendation-item" Active=@(recommendation.IsFirst)>
            <div class="recommendation-artist">@recommendation.Name</div>
            <div Class="recommendation-image">
                <Image Src="@(recommendation.ImageFile)" />
            </div>
        </CarouselItem>
    }
</Carousel>

@code {
    Carousel _carousel = default!;
    IEnumerable<Recommendation> _recommendations = [];
    HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        if (RendererInfo.IsInteractive)
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri(NowPlayinHubDefaults.RECOMMENDATION_HUB))
                .Build();
            _hubConnection.On<int>("ReceiveShowItemByIndex", OnReceiveShowItemByIndex);
            await _hubConnection.StartAsync();

            _recommendations = await RecommendationService.GetRecommendationsAsync();
            // if none is selected, the control breaks.
            // the hub will send the correct
            _recommendations.Last().IsFirst = true;
        }

        await base.OnInitializedAsync();
    }

    private async void OnReceiveShowItemByIndex(int index)
    {
        var currentIndex = await GetSelectedIndexAsync();

        if(currentIndex > 0)
        {
            if (currentIndex - index == 1)
                await _carousel.ShowPreviousItemAsync();
            else
                await _carousel.ShowItemByIndexAsync(index);
        }
        else if(currentIndex == 0)
        {
            if(index == _recommendations.Count()-1)
                await _carousel.ShowPreviousItemAsync();
            else
                await _carousel.ShowItemByIndexAsync(index);
        }
    }

    private async Task<int> GetSelectedIndexAsync()
       => await JSRuntime.InvokeAsync<int>("carousel.getSelectedIndex", _carousel.Id);

}
